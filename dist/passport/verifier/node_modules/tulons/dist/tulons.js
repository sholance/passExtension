"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Tulons = void 0;
var Tulons = (function () {
    function Tulons(url, network) {
        if (network === void 0) { network = 1; }
        this._ceramicUrl = url || "https://ceramic-clay.3boxlabs.com";
        this._network = "".concat(network);
    }
    Tulons.prototype.getGenesis = function (address, ids) {
        return __awaiter(this, void 0, void 0, function () {
            var streams, did, response, res, content, iterateOn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        streams = {};
                        did = getDID(address, this._network);
                        return [4, fetch("".concat(this._ceramicUrl, "/api/v0/streams"), {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    type: 0,
                                    genesis: {
                                        header: {
                                            family: "IDX",
                                            controllers: [did]
                                        }
                                    },
                                    opts: {
                                        pin: true,
                                        sync: true,
                                        anchor: false
                                    }
                                })
                            })];
                    case 1:
                        response = _a.sent();
                        return [4, response.json()];
                    case 2:
                        res = ((_a.sent()) || {});
                        content = res.state.next ? res.state.next.content : res.state.content;
                        iterateOn = ids && ids.length ? ids : Object.keys(content);
                        iterateOn.forEach(function (linkedStreamId) {
                            streams[linkedStreamId] = content[linkedStreamId]
                                ? content[linkedStreamId]
                                : false;
                        });
                        return [2, {
                                did: did,
                                streams: streams
                            }];
                }
            });
        });
    };
    Tulons.prototype.getStream = function (streamId) {
        return __awaiter(this, void 0, void 0, function () {
            var content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getStreams([streamId])];
                    case 1:
                        content = (_a.sent())[streamId.replace("ceramic://", "")];
                        return [2, content];
                }
            });
        });
    };
    Tulons.prototype.getStreams = function (streamIds) {
        return __awaiter(this, void 0, void 0, function () {
            var queries, response, streams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queries = streamIds.map(function (streamId) {
                            return {
                                streamId: streamId
                            };
                        });
                        return [4, fetch("".concat(this._ceramicUrl, "/api/v0/multiqueries"), {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ queries: queries })
                            })];
                    case 1:
                        response = _a.sent();
                        return [4, response.json()];
                    case 2:
                        streams = ((_a.sent()) || {});
                        Object.keys(streams).map(function (stream) {
                            var res = streams[stream];
                            streams[stream] = res.next ? res.next.content : res.content;
                        });
                        return [2, streams];
                }
            });
        });
    };
    Tulons.prototype.getHydrated = function (content, recursive) {
        if (recursive === void 0) { recursive = false; }
        return __awaiter(this, void 0, void 0, function () {
            var streams, hydrated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getStreams(findStreams(content, []))];
                    case 1:
                        streams = _a.sent();
                        hydrated = hydrateWithStreams.call(this, content, streams, recursive);
                        return [2, hydrated];
                }
            });
        });
    };
    return Tulons;
}());
exports.Tulons = Tulons;
function getDID(address, network) {
    return "did:pkh:eip155:".concat(network, ":").concat(address.toLowerCase());
}
function findStreams(content, streams) {
    if (streams === void 0) { streams = []; }
    if (content &&
        typeof content === "string" &&
        content.indexOf("ceramic://") == 0) {
        streams.push(content);
    }
    else if (content && typeof content == "object") {
        Object.keys(content).map(function (key) {
            streams = findStreams(content[key], streams);
        });
    }
    return streams;
}
function hydrateWithStreams(content, streams, recursive, layerStreams, skipRecursiveHydrate) {
    if (recursive === void 0) { recursive = false; }
    if (layerStreams === void 0) { layerStreams = []; }
    if (skipRecursiveHydrate === void 0) { skipRecursiveHydrate = false; }
    return __awaiter(this, void 0, void 0, function () {
        var lStreams;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(content && typeof content == "object")) return [3, 4];
                    return [4, Promise.all(Object.keys(content).map(function (key) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        if (!(content[key] &&
                                            typeof content[key] === "string" &&
                                            content[key].indexOf("ceramic://") == 0)) return [3, 1];
                                        content[key] =
                                            streams[content[key].replace("ceramic://", "")];
                                        if (recursive) {
                                            layerStreams = findStreams(content[key], layerStreams);
                                        }
                                        return [3, 3];
                                    case 1:
                                        if (!(content[key] && typeof content[key] == "object")) return [3, 3];
                                        _a = content;
                                        _b = key;
                                        return [4, hydrateWithStreams.call(this, content[key], streams, recursive, layerStreams, true)];
                                    case 2:
                                        _a[_b] = (_c.sent());
                                        _c.label = 3;
                                    case 3: return [2];
                                }
                            });
                        }); }))];
                case 1:
                    _a.sent();
                    if (!(!skipRecursiveHydrate && layerStreams.length > 0)) return [3, 4];
                    return [4, this.getStreams(layerStreams)];
                case 2:
                    lStreams = _a.sent();
                    return [4, hydrateWithStreams.call(this, content, lStreams, recursive)];
                case 3:
                    content = (_a.sent());
                    _a.label = 4;
                case 4: return [2, content];
            }
        });
    });
}
