export declare type CeramicGenesis = {
    did: string;
    streams: CeramicGenesisStreams;
};
export declare type CeramicGenesisStreams = Record<string, string | false>;
export declare type CeramicStreamResponse = {
    content: unknown;
    next?: {
        content: unknown;
    };
};
export declare type CeramicStream = Record<string, unknown>;
export declare type CeramicStreams = Record<string, unknown>;
export declare type CeramicStreamIds = string[];
export declare type CeramicRecord = Record<string, unknown> | unknown[];
export declare class Tulons {
    _network: string;
    _ceramicUrl: string;
    constructor(url?: string, network?: string | number);
    getGenesis(address: string, ids?: CeramicStreamIds): Promise<CeramicGenesis>;
    getStream(streamId: string): Promise<CeramicStream>;
    getStreams(streamIds: CeramicStreamIds): Promise<CeramicStreams>;
    getHydrated(content: CeramicRecord, recursive?: boolean): Promise<CeramicRecord>;
}
